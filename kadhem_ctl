#!/usr/bin/env fish

# must not contain spaces because it confuses Unreal build tool
set project_path '/home/kadhem/VRUnrealTemplate/VRUnrealTemplate.uproject'
set package "com.kadhem.VRUnrealTemplate"

# myFile.fish - simple command dispatcher for Fish shell

# Exit on error
function safe_exit
    set -l status $status
    if test $status -ne 0
        echo "Error: command failed with status $status" >&2
    end
    exit $status
end

# Trap errors
function on_error --on-event fish_posterror
    safe_exit
end

# -------------------------
# Define commands as functions
# -------------------------
function generate_compile_commands
    # echo "Running cmd1 with args: $argv"
    # Example real command:
    # ls -la $argv[1]
    #./UnrealEngine/Engine/Build/BatchFiles/Linux/Build.sh -project=$project_path -mode=GenerateClangDatabase VRUnrealTemplateEditor Linux Development;
    ./UnrealEngine/Engine/Build/BatchFiles/Linux/Build.sh -project=$project_path -mode=GenerateClangDatabase VRUnrealTemplate Android Development;
    mv ./UnrealEngine/compile_commands.json .
end

function generate_makefile
    ./UnrealEngine/Engine/Build/BatchFiles/Linux/GenerateProjectFiles.sh -project=$project_path -makefile;
    mv ./UnrealEngine/Makefile .
end


# Run the incremental cook, package and install the apk.
# Does not build the project.
# Did not include -run or -deploy because it results in an app that fails at startup, UAT is doing
# something different then the install script.
function cook_install
    ./UnrealEngine/Engine/Build/BatchFiles/RunUAT.sh BuildCookRun -project=$project_path -platform=Android -cook -iterate -stage -package;
    ./Binaries/Android/Install_VRUnrealTemplate-arm64.sh
end

# Runs build and install apk
# function build_install
#     ./UnrealEngine/Engine/Build/BatchFiles/RunUAT.sh BuildCookRun -project=$project_path -platform=Android -build -target=VRUnrealTemplate -development -nocompileeditor
# end

function build_install
    ./UnrealEngine/Engine/Build/BatchFiles/RunUAT.sh BuildCookRun -project=$project_path -platform=Android -build -target=VRUnrealTemplate -nocompileeditor
    and ./Binaries/Android/Install_VRUnrealTemplate-arm64.sh
end

function full_build_cook
    ./UnrealEngine/Engine/Build/BatchFiles/RunUAT.sh BuildCookRun -project=$project_path -platform=Android -build -cook -iterate -stage -package -target=VRUnrealTemplate -nocompileeditor
    ./Binaries/Android/Install_VRUnrealTemplate-arm64.sh
end

function run_lldb_server
    set local_symbols "/home/kadhem/Documents/Unreal Projects/VRUnrealTemplate/Binaries/Android/VRUnrealTemplate-arm64.so"

    adb forward tcp:5038 tcp:5038
    adb forward tcp:5039 tcp:5039

    
    #adb shell run-as "com.kadhem.VRUnrealTemplate mkdir -p lldb/bin/"
    #adb shell run-as "com.kadhem.VRUnrealTemplate cp /data/local/tmp/lldb-server ./lldb/bin/"
   
    adb shell run-as "$package pkill lldb-server"
    adb shell run-as "$package ./lldb/bin/lldb-server platform --server --listen *:5038" &
    adb shell run-as "$package ./lldb/bin/lldb-server gdbserver  *:5039" &
    
    set main_pid (adb shell run-as $package "pidof $package" | awk '{print $1}')
    
    set maps_line (adb shell run-as $package "cat /proc/$main_pid/maps | grep libUnreal.so | head -n 1")
    
    if test -z "$maps_line"
        echo "No libUnreal.so mapping found!"
        exit 1
    end


    set start_virt (echo $maps_line | awk '{print $1}' | cut -d'-' -f1)
    set offset (echo $maps_line | awk '{print $3}')
    set file_path (echo $maps_line | awk '{print $6}')

    # we assuming /proc/maps will be sorted by vitual address, thus the line we got should start 
    # at the file begining, if not we will not have the correct mapping to slide the module later
    if test "$offset" != "00000000"
        echo "ERROR: libUnreal.so offset in /proc/maps is non-zero: $offset"
    end

    set outfile "lldb_attach_generated"
    echo "# This is a file generated by kadhem_ctl script to attach to $main_pid" > $outfile
    echo "target create --no-dependents \"$file_path\"" >> $outfile
    echo "process handle SIGSEGV --pass true --stop false --notify false" >> $outfile
    echo "attach $main_pid" >> $outfile
    echo "continue" >> $outfile
    echo "target modules load --file \"$file_path\" --slide 0x$start_virt" >> $outfile
    echo "target symbols add \"$local_symbols\"" >> $outfile

end

# -------------------------
# Helper / usage
# -------------------------
function usage
echo "inset usage here"
end

# -------------------------
# Dispatching logic
# -------------------------
if test (count $argv) -lt 1
    usage
    exit 1
end

set cmd $argv[1]
set args $argv[2..-1]

switch $cmd
    case help -h --help
        usage
    case list
        functions | grep -E '^cmd' | sort
    case '*'
        if functions -q $cmd
            $cmd $args
        else
            echo "Unknown command: $cmd" >&2
            usage
            exit 2
        end
end
